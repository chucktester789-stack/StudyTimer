diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..d6292e922c46a4943ad51ffda0342f43c0510b0b
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,9 @@
+node_modules
+.DS_Store
+dist
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+.pnpm-debug.log*
+.env
+.vscode
diff --git a/README.md b/README.md
index 7691370e10036ad5aa4db41d6304dfb00aaeab0b..c9521b4a2bb7fee9e0d1c6ff97a1827833f3196c 100644
GIT binary patch
literal 343
zcmY+8O=`nH42Ab|3W1mPT%fyzbk{<uA#2MX*%ltl!~7)lVp(P9i&ZwX(3Sq)_ns<f
za&g~Hh%DKd4;Eg~Q-o6)M(jv}N6~TEo)JRao<or_CGIDR1Q%M?S7R)E5%w8g;L4e_
zv~izpTuY{C-MX}@c}H<9qpjf-f`uYZvoR;zkWwo6jRX`=BS{U|O*rq3-yTUL1s2Y5
z#>B~9(X(TU`p@wI3-q2za#A}UYnVw_XYAF$8B<m8Ci%|&?03SnZQEg*jD!VPQbzBO
hUj4w)ZNDGTXIx#GGq3WW*>zoE@BXL|>Be+F$RA`;cUu4e

literal 30
lcmezWPnki1A()|rp_Czop^_nlA(J7OA(f$sftP`c0RVqE266xZ

diff --git a/index.html b/index.html
new file mode 100644
index 0000000000000000000000000000000000000000..f425e55e1d1c8d3f25acf269bdf063246b2fb2fd
--- /dev/null
+++ b/index.html
@@ -0,0 +1,13 @@
+<!doctype html>
+<html lang="de">
+  <head>
+    <meta charset="UTF-8" />
+    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <title>StudySprint</title>
+  </head>
+  <body>
+    <div id="root"></div>
+    <script type="module" src="/src/main.jsx"></script>
+  </body>
+</html>
diff --git a/package.json b/package.json
new file mode 100644
index 0000000000000000000000000000000000000000..a28aa046d9577e661e843aef74b76f7abb2cbeec
--- /dev/null
+++ b/package.json
@@ -0,0 +1,22 @@
+{
+  "name": "studysprint",
+  "private": true,
+  "version": "0.0.1",
+  "type": "module",
+  "scripts": {
+    "dev": "vite",
+    "build": "vite build",
+    "preview": "vite preview"
+  },
+  "dependencies": {
+    "react": "^18.3.1",
+    "react-dom": "^18.3.1",
+    "react-router-dom": "^6.26.1"
+  },
+  "devDependencies": {
+    "@types/react": "^18.3.3",
+    "@types/react-dom": "^18.3.0",
+    "@vitejs/plugin-react": "^4.3.1",
+    "vite": "^5.4.10"
+  }
+}
diff --git a/public/vite.svg b/public/vite.svg
new file mode 100644
index 0000000000000000000000000000000000000000..59b17e2b03fe00279c3222ceaa9246fbee0b2aac
--- /dev/null
+++ b/public/vite.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 410 404"><path fill="#ffd62e" d="M399.6 59.7 215.8 388.4a12.8 12.8 0 0 1-22.2-.2L9.7 59.7a12.8 12.8 0 0 1 13-18.9L203.3 67a12.8 12.8 0 0 0 4.5 0l180.7-26.2a12.8 12.8 0 0 1 13 18.9Z"/><path fill="#35495e" d="M292.5 1.3 155.7 22.8a6.4 6.4 0 0 0-5.3 7.5l36.4 207.5a6.4 6.4 0 0 0 10.3 3.9l29-25.7a6.4 6.4 0 0 1 10.5 3.3l18.3 87.2c1.4 6.7 10.8 7.4 13.1.9l73.8-207.2a6.4 6.4 0 0 0-7-8.5l-45.5 6.2a6.4 6.4 0 0 1-7-7.8l12.5-62.6a6.4 6.4 0 0 0-7-7.6Z"/></svg>
diff --git a/src/App.jsx b/src/App.jsx
new file mode 100644
index 0000000000000000000000000000000000000000..e741ab56b7f0ea7755e9e670772e4e64bf46987c
--- /dev/null
+++ b/src/App.jsx
@@ -0,0 +1,158 @@
+import { useState } from 'react' // React-Hook für lokalen Komponentenstate
+import { Routes, Route, Link, useNavigate } from 'react-router-dom' // Routing-Funktionen für SPA-Navigation
+
+export default function App() { // Hauptkomponente kapselt Routen und State
+  const [tasks, setTasks] = useState([]) // Aufgabenliste im Top-Level-State
+
+  return ( // Rendert den App-Container
+    <div style={{ maxWidth: 720, margin: '0 auto', padding: 16 }}> {/* Zentrierter Wrapper für Inhalt */}
+      <Header /> {/* Navigation mit Links zu den Hauptseiten */}
+      <Routes> {/* Definiert Route-zu-Komponente-Zuordnung */}
+        <Route path="/" element={<Landing />} /> {/* Landing-Seite erklärt Zweck */}
+        <Route // Detailroute für App-Funktionalität
+          path="/app" // URL-Pfad für Kernseite
+          element={ // Element beschreibt zu rendernde Komponente
+            <AppPage
+              tasks={tasks} // Übergibt aktuelle Aufgabenliste
+              onAdd={(task) => setTasks((prev) => [...prev, task])} // Fügt Aufgabe an Liste an
+              onToggle={(id) => setTasks((prev) => prev.map((task) => task.id === id ? { ...task, done: !task.done } : task))} // Toggle erledigt-Status
+              onDelete={(id) => setTasks((prev) => prev.filter((task) => task.id !== id))} // Entfernt Aufgabe aus Liste
+            />
+          }
+        />
+        <Route path="/stats" element={<Stats tasks={tasks} />} /> {/* Zeigt einfache Kennzahlen */}
+        <Route path="*" element={<NotFound />} /> {/* Fallback für unbekannte URLs */}
+      </Routes>
+    </div>
+  )
+}
+
+function Header() { // Navigationsleiste oben
+  return ( // Rendert Navigation
+    <nav style={{ display: 'flex', gap: 12, marginBottom: 16 }}> {/* Horizontale Linkliste */}
+      <Link to="/">Landing</Link> {/* Verlinkt zur Landing-Page */}
+      <Link to="/app">App</Link> {/* Verlinkt zur Hauptfunktion */}
+      <Link to="/stats">Stats</Link> {/* Verlinkt zur Statistikseite */}
+    </nav>
+  )
+}
+
+function Landing() { // Landing-Seite zur Einführung
+  return ( // Rendert Landing-Inhalt
+    <section> {/* Semantischer Abschnitt */}
+      <h1>StudySprint</h1> {/* Klarer Titel für Prüfer */}
+      <p>Minimaler Aufgabenplaner mit Timer-Vorbereitung.</p> {/* Kurzbeschreibung */}
+      <ul> {/* Auflistung der Kernfeatures */}
+        <li>Aufgaben anlegen, abhaken und löschen ohne Reload.</li> {/* Dynamische Funktionalität */}
+        <li>Routing zwischen Landing, App und Stats inklusive.</li> {/* Weist auf Mehrseitigkeit hin */}
+        <li>Vollständig clientseitig, keine Backend-Abhängigkeiten.</li> {/* Prüfkonformität */}
+      </ul>
+      <p><Link to="/app">Loslegen</Link></p> {/* Call-to-Action zur App-Seite */}
+    </section>
+  )
+}
+
+function AppPage({ tasks, onAdd, onToggle, onDelete }) { // Kernseite für Aufgabenverwaltung
+  return ( // Rendert Formular plus Liste
+    <section> {/* Gruppiert den App-Inhalt */}
+      <h2>Aufgaben</h2> {/* Überschrift */}
+      <TaskForm onAdd={onAdd} /> {/* Formular zum Hinzufügen neuer Aufgaben */}
+      <TaskList tasks={tasks} onToggle={onToggle} onDelete={onDelete} /> {/* Liste mit Aktionen */}
+    </section>
+  )
+}
+
+function TaskForm({ onAdd }) { // Formular-Komponente mit Validierung
+  const [title, setTitle] = useState('') // State für Aufgabentitel
+  const [minutes, setMinutes] = useState('25') // State für geplante Minuten
+  const [errors, setErrors] = useState({}) // State für Validierungsfehler
+  const navigate = useNavigate() // Hook zum optionalen Navigieren
+
+  function validate() { // Führt Basic-Validierung aus
+    const nextErrors = {} // Lokales Fehlerobjekt
+    if (!title.trim()) nextErrors.title = 'Titel ist erforderlich.' // Pflichtfeldprüfung für Titel
+    const numericMinutes = Number.parseInt(minutes, 10) // Wandelt Eingabe in Zahl um
+    if (Number.isNaN(numericMinutes) || numericMinutes < 1 || numericMinutes > 200) nextErrors.minutes = 'Minuten 1–200 angeben.' // Wertebereichsprüfung
+    setErrors(nextErrors) // Speichert Fehler im State
+    return Object.keys(nextErrors).length === 0 // Gibt true zurück wenn keine Fehler vorhanden
+  }
+
+  function handleSubmit(event) { // Formular-Submit-Handler
+    event.preventDefault() // Verhindert Seitenneuladen
+    if (!validate()) return // Bricht ab wenn Validierung fehlschlägt
+    const task = { // Erstellt neues Aufgabenobjekt
+      id: crypto.randomUUID(), // Generiert stabile ID
+      title: title.trim(), // Nutzt getrimmten Titel
+      minutes: Number(minutes), // Speichert Minuten als Zahl
+      done: false, // Anfangsstatus unerledigt
+    }
+    onAdd(task) // Übergibt neue Aufgabe an Elternkomponente
+    setTitle('') // Setzt Titelfeld zurück
+    setMinutes('25') // Setzt Minutenfeld zurück
+    // navigate('/stats') // Optional: automatische Navigation (bewusst deaktiviert)
+  }
+
+  return ( // Rendert Formularstruktur
+    <form onSubmit={handleSubmit} style={{ display: 'grid', gap: 8, maxWidth: 520 }}> {/* Grid-Layout für Felder */}
+      <label> {/* Label für Titel */}
+        Titel {/* Beschriftungstext */}
+        <input
+          value={title} // Kontrolliert den Eingabewert
+          onChange={(event) => setTitle(event.target.value)} // Aktualisiert Titelstate
+          placeholder="z.B. Zusammenfassung Kapitel 3" // Hilfetext im Feld
+        />
+      </label>
+      {errors.title && <small style={{ color: 'crimson' }}>{errors.title}</small>} {/* Fehlerausgabe Titel */}
+
+      <label> {/* Label für Minuten */}
+        Minuten (1–200) {/* Beschriftungstext */}
+        <input
+          type="number" // Verwendet numerisches Eingabefeld
+          min={1} // Minimale Minutenanzahl
+          max={200} // Maximale Minutenanzahl
+          step={1} // Schrittweite der Pfeiltasten
+          value={minutes} // Bindet Minutenstate
+          onChange={(event) => setMinutes(event.target.value)} // Aktualisiert Minutenstate
+        />
+      </label>
+      {errors.minutes && <small style={{ color: 'crimson' }}>{errors.minutes}</small>} {/* Fehlerausgabe Minuten */}
+
+      <button type="submit">Hinzufügen</button> {/* Submit-Button */}
+    </form>
+  )
+}
+
+function TaskList({ tasks, onToggle, onDelete }) { // Liste der Aufgaben mit Aktionen
+  if (tasks.length === 0) return <p>Keine Aufgaben angelegt.</p> // Früher Rückgabewert für leeren Zustand
+  return ( // Rendert Aufgabenliste
+    <ul style={{ marginTop: 12 }}> {/* Ungeordnete Liste */}
+      {tasks.map((task) => ( // Mappt über Aufgabenarray
+        <li key={task.id} style={{ display: 'flex', alignItems: 'center', gap: 8, padding: '4px 0' }}> {/* Einzelner Listeneintrag */}
+          <input type="checkbox" checked={task.done} onChange={() => onToggle(task.id)} /> {/* Checkbox toggelt Status */}
+          <span style={{ textDecoration: task.done ? 'line-through' : 'none' }}> {/* Streicht erledigte Aufgaben */}
+            {task.title} – {task.minutes} min {/* Zeigt Titel und Minuten */}
+          </span>
+          <button onClick={() => onDelete(task.id)} aria-label="Aufgabe löschen">Löschen</button> {/* Löscht Aufgabe */}
+        </li>
+      ))}
+    </ul>
+  )
+}
+
+function Stats({ tasks }) { // Statistikseite für Kennzahlen
+  const total = tasks.length // Gesamtanzahl der Aufgaben
+  const done = tasks.filter((task) => task.done).length // Anzahl erledigter Aufgaben
+  const minutes = tasks.reduce((sum, task) => sum + (task.done ? task.minutes : 0), 0) // Summe erledigter Minuten
+  return ( // Rendert Statistikbereich
+    <section> {/* Container für Statistik */}
+      <h2>Stats</h2> {/* Überschrift */}
+      <p>Aufgaben gesamt: {total}</p> {/* Ausgabe Gesamtanzahl */}
+      <p>Erledigt: {done}</p> {/* Ausgabe erledigte Aufgaben */}
+      <p>Erledigte Minuten: {minutes}</p> {/* Ausgabe Minuten */}
+    </section>
+  )
+}
+
+function NotFound() { // Fallback-Komponente bei unbekannten Routen
+  return <p>Seite nicht gefunden.</p> // Fehlermeldungsausgabe
+}
diff --git a/src/index.css b/src/index.css
new file mode 100644
index 0000000000000000000000000000000000000000..197262be481c3185fb895b17a52ff531f380be47
--- /dev/null
+++ b/src/index.css
@@ -0,0 +1,46 @@
+:root { /* Grundvariablen-Container */
+  font-family: 'Inter', system-ui, Avenir, Helvetica, Arial, sans-serif; /* Moderne Standardschrift */
+  line-height: 1.5; /* Angenehme Zeilenhöhe */
+  color: #213547; /* Dunkles Grundgrau für Text */
+  background-color: #f5f5f5; /* Heller Hintergrund */
+}
+
+body { /* Globales Body-Layout */
+  margin: 0; /* Entfernt Standardabstand */
+  display: flex; /* Nutzt Flexbox */
+  justify-content: center; /* Zentriert horizontal */
+  min-height: 100vh; /* Füllt gesamte Höhe */
+}
+
+a { /* Links-Styling */
+  color: #646cff; /* Markante Linkfarbe */
+  text-decoration: none; /* Entfernt Unterstreichung */
+}
+
+a:hover { /* Hover-State für Links */
+  text-decoration: underline; /* Betont Hover */
+}
+
+button { /* Buttons-Styling */
+  padding: 6px 12px; /* Komfortable Klickfläche */
+  border-radius: 6px; /* Runde Ecken */
+  border: 1px solid #1a1a1a; /* Dezenter Rahmen */
+  background-color: #1a1a1a; /* Dunkler Hintergrund */
+  color: white; /* Weißer Text für Kontrast */
+  cursor: pointer; /* Zeigt Klickbarkeit */
+}
+
+button:hover { /* Hover-Effekt für Buttons */
+  background-color: #333; /* Hellerer Ton beim Hover */
+}
+
+input { /* Eingabe-Felder-Styling */
+  width: 100%; /* Füllt verfügbaren Platz */
+  padding: 6px; /* Innenabstand */
+  border-radius: 4px; /* Leicht abgerundete Ecken */
+  border: 1px solid #ccc; /* Dezenter Rahmen */
+}
+
+small { /* Fehlermeldungen-Styling */
+  display: block; /* Eigene Zeile */
+}
diff --git a/src/main.jsx b/src/main.jsx
new file mode 100644
index 0000000000000000000000000000000000000000..27f9b1e92c98a1a6fa8bb0ba31cdbcd2c9ebdee4
--- /dev/null
+++ b/src/main.jsx
@@ -0,0 +1,13 @@
+import React from 'react' // Importiert React für JSX-Verarbeitung
+import ReactDOM from 'react-dom/client' // Moderne Root-API zum Mounten
+import { BrowserRouter } from 'react-router-dom' // SPA-Routing via History-API
+import App from './App.jsx' // Hauptkomponente mit allen Routen
+import './index.css' // Globale Basis-Styles
+
+ReactDOM.createRoot(document.getElementById('root')).render( // Mountet die Anwendung ins Root-Element
+  <React.StrictMode> {/* Aktiviert zusätzliche Warnungen im Dev-Modus */}
+    <BrowserRouter> {/* Ermöglicht clientseitige Navigation */}
+      <App /> {/* Rendert unsere App-Komponente */}
+    </BrowserRouter> {/* Schließt den Router-Kontext */}
+  </React.StrictMode> {/* Schließt StrictMode */}
+) // Beendet render-Aufruf
diff --git a/vite.config.js b/vite.config.js
new file mode 100644
index 0000000000000000000000000000000000000000..9ffcc675746194c4a34eb43404d15db40b810265
--- /dev/null
+++ b/vite.config.js
@@ -0,0 +1,6 @@
+import { defineConfig } from 'vite'
+import react from '@vitejs/plugin-react'
+
+export default defineConfig({
+  plugins: [react()],
+})
